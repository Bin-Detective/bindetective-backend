# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  workflow_dispatch:  # This allows manual trigger

env:
  PROJECT_ID: 'dicoding-submission-440805' 
  REGION: 'asia-southeast2' 
  SERVICE: 'bin-detective' 
  SERVICE_ACCOUNT: 'bindetective@dicoding-submission-440805.iam.gserviceaccount.com' # Replace with the service account for Cloud Run
  FIREBASE_STORAGE_BUCKET_ENV: 'dicoding-submission-440805.firebasestorage.app'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4


      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      # Authenticate to Google Cloud using the service account key
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v0 # Authentication action
        with:
         credentials_json: '${{ secrets.GCP_SA_KEY }}' # Use the secret with the service account JSON key
         token_format: 'access_token'

      - name: 'Set up Google Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: "${{ env.PROJECT_ID }}"  # Use your project ID
        
      # BEGIN - Docker auth and build
      #
      # If you already have a container image, you can omit these steps.
      # BEGIN - Docker auth and build
      - name: 'Docker Auth'
        uses: 'docker/login-action@v1'
        with:
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
          registry: '${{ env.REGION }}-docker.pkg.dev'

      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/bin-detective/bin-detective:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"
          
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/bin-detective/bin-detective:${{ github.sha }}'
          flags: >-
            --cpu=1
            --memory=512Mi
            --min-instances=0
            --max-instances=1
            --set-env-vars=FIREBASE_STORAGE_BUCKET=${{ env.FIREBASE_STORAGE_BUCKET_ENV }}
            --port=7070
           
      - name: 'Allow unauthenticated access'
        run: |
          gcloud run services add-iam-policy-binding ${{ env.SERVICE }} --region=${{ env.REGION }} --member=allUsers --role=roles/run.invoker
            
      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-

          echo ${{ steps.deploy.outputs.url }}
